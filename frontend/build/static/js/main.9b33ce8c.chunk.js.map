{"version":3,"sources":["assets/Icogram_WChatCenter.svg","assets/IcogramFeatureText.svg","assets/WhatsApp_Logo_8.png","assets/ChatCenterQR.png","assets/Icogram_Contacto.svg","components/MyHeader.jsx","components/ChatCenter.jsx","components/Producto.jsx","components/Demo.jsx","components/Contacto.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyHeader","ButoonClick","elementid","ele","document","getElementById","window","scrollTo","offsetLeft","offsetTop","className","onClick","ChatCenter","id","src","require","alt","Producto","Demo","open","Contacto","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mLAAAA,EAAOC,QAAU,IAA0B,iD,kCCA3CD,EAAOC,QAAU,IAA0B,gD,kCCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,kCCA3CD,EAAOC,QAAU,IAA0B,8C,kFCI5B,SAASC,IACtB,IAAMC,EAAc,SAACC,GACnB,IAAIC,EAAMC,SAASC,eAAeH,GAClCI,OAAOC,SAASJ,EAAIK,WAAYL,EAAIM,UAAY,KAalD,OACE,4BAAQC,UAAU,YAChB,wBAAIA,UAAU,MAAd,cACA,yBAAKA,UAAU,OACb,4BAAQA,UAAU,YAAYC,QAAS,kBAAMV,EAAY,gBAAzD,UAGA,4BAAQS,UAAU,YAAYC,QAAS,kBAAMV,EAAY,cAAzD,YAGA,4BAAQS,UAAU,YAAYC,QAAS,kBAAMV,EAAY,UAAzD,QAGA,4BAAQS,UAAU,YAAYC,QAAS,kBAAMV,EAAY,cAAzD,c,MC9BO,SAASW,IACtB,OACE,yBAAKC,GAAG,aAAaH,UAAU,iBAC7B,yBACEI,IAAKC,EAAQ,IACbL,UAAU,kBACVM,IAAI,qB,MCLG,SAASC,IACtB,OACE,yBAAKJ,GAAG,WAAWH,UAAU,eAC3B,yBACEI,IAAKC,EAAQ,IACbL,UAAU,SACVM,IAAI,Y,MCPG,SAASE,IAOtB,OACE,yBAAKL,GAAG,OAAOH,UAAU,WACvB,yBAAKA,UAAU,eACb,6BACA,wBAAIA,UAAU,WAAd,6CACA,6BACA,yBACEI,IAAKC,EAAQ,IACbL,UAAU,gBACVM,IAAI,gBACJL,QAAS,WAffL,OAAOa,KACL,+EAgBE,wBAAIT,UAAU,WAAd,4BAEF,yBAAKA,UAAU,iBACb,yBACEI,IAAKC,EAAQ,IACbL,UAAU,gBACVM,IAAI,oB,MCxBC,SAASI,IACtB,OACE,yBAAKP,GAAG,WAAWH,UAAU,eAC3B,yBACEI,IAAKC,EAAQ,IACbL,UAAU,gBACVM,IAAI,mBCYGK,MAdf,WACE,OACE,yBAAKX,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCJYY,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASC,eAAe,SDyHpB,kBAAmBwB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b33ce8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Icogram_WChatCenter.dcd282f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/IcogramFeatureText.821d8400.svg\";","module.exports = __webpack_public_path__ + \"static/media/WhatsApp_Logo_8.c9e84820.png\";","module.exports = __webpack_public_path__ + \"static/media/ChatCenterQR.c3174d99.png\";","module.exports = __webpack_public_path__ + \"static/media/Icogram_Contacto.334b85cd.svg\";","import React from \"react\";\r\nimport \"./MyHeader.css\";\r\n/*import { CSSTransition } from \"react-transition-group\";*/\r\n\r\nexport default function MyHeader() {\r\n  const ButoonClick = (elementid) => {\r\n    var ele = document.getElementById(elementid);\r\n    window.scrollTo(ele.offsetLeft, ele.offsetTop - 90);\r\n  };\r\n  /*\r\n  const ChatCenterClick = () => {\r\n    var ele = document.getElementById(\"chatcenter\");\r\n    window.scrollTo(ele.offsetLeft, ele.offsetTop - 90);\r\n  };\r\n\r\n  const ProductoClick = () => {\r\n    var ele = document.getElementById(\"producto\");\r\n    window.scrollTo(ele.offsetLeft, ele.offsetTop - 90);\r\n  };\r\n*/\r\n  return (\r\n    <header className=\"myheader\">\r\n      <h1 className=\"h1\">ChatCenter</h1>\r\n      <nav className=\"Nav\">\r\n        <button className=\"buttonnav\" onClick={() => ButoonClick(\"chatcenter\")}>\r\n          Inicio\r\n        </button>\r\n        <button className=\"buttonnav\" onClick={() => ButoonClick(\"producto\")}>\r\n          Producto\r\n        </button>\r\n        <button className=\"buttonnav\" onClick={() => ButoonClick(\"demo\")}>\r\n          Demo\r\n        </button>\r\n        <button className=\"buttonnav\" onClick={() => ButoonClick(\"contacto\")}>\r\n          Contacto\r\n        </button>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./ChatCenter.css\";\r\n\r\nexport default function ChatCenter() {\r\n  return (\r\n    <div id=\"chatcenter\" className=\"divchatcenter\">\r\n      <img\r\n        src={require(\"../assets/Icogram_WChatCenter.svg\")}\r\n        className=\"imagechatcenter\"\r\n        alt=\"imagechatcenter\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Producto.css\";\r\n/*import { CSSTransition } from \"react-transition-group\";*/\r\n\r\nexport default function Producto() {\r\n  return (\r\n    <div id=\"producto\" className=\"divproducto\">\r\n      <img\r\n        src={require(\"../assets/IcogramFeatureText.svg\")}\r\n        className=\"topimg\"\r\n        alt=\"topimg\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Demo.css\";\r\n\r\nexport default function Demo() {\r\n  const imageWhatsAppClick = () => {\r\n    window.open(\r\n      \"https://api.whatsapp.com/send?phone=14155238886&text=join%20snake-public\"\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div id=\"demo\" className=\"divdemo\">\r\n      <div className=\"divwhatsapp\">\r\n        <br />\r\n        <h1 className=\"h1color\"> Realice Click sobre el icono de WhatsApp</h1>\r\n        <br />\r\n        <img\r\n          src={require(\"../assets/WhatsApp_Logo_8.png\")}\r\n          className=\"imagewhatsapp\"\r\n          alt=\"imagewhatsapp\"\r\n          onClick={() => imageWhatsAppClick()}\r\n        />\r\n        <h1 className=\"h1color\">o escanee el codigo QR.</h1>\r\n      </div>\r\n      <div className=\"divwhatsappqr\">\r\n        <img\r\n          src={require(\"../assets/ChatCenterQR.png\")}\r\n          className=\"imagewhatsapp\"\r\n          alt=\"imagewhatsapp\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Contacto.css\";\r\n/*import { CSSTransition } from \"react-transition-group\";*/\r\n\r\nexport default function Contacto() {\r\n  return (\r\n    <div id=\"contacto\" className=\"divcontacto\">\r\n      <img\r\n        src={require(\"../assets/Icogram_Contacto.svg\")}\r\n        className=\"imagecontacto\"\r\n        alt=\"imagecontacto\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\n//import \"./App.css\";\nimport MyHeader from \"./components/MyHeader\";\nimport ChatCenter from \"./components/ChatCenter\";\nimport Producto from \"./components/Producto\";\nimport Demo from \"./components/Demo\";\nimport Contacto from \"./components/Contacto\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MyHeader />\n        <ChatCenter />\n        <Producto />\n        <Demo />\n        <Contacto />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}